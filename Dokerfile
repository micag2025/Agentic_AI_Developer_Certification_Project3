# This Dockerfile is optimized for Streamlit apps and includes best practices:
# - Installs dependencies before copying the entire source (for build caching).
# - Exposes the correct port and sets recommended environment variables.
# - Runs your app from the src/app.py entry point.


# --------------------
# 1. Base Image
# --------------------

# Use an official Python runtime as a parent image
FROM python:3.10-slim AS base

# Set working directory in the container
WORKDIR /app

# System dependencies (e.g., for building some Python wheels)
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential curl git \
    && rm -rf /var/lib/apt/lists/*

# Install pip-tools for dependency management (optional but useful)
RUN pip install --no-cache-dir --upgrade pip setuptools wheel

# --------------------
# 2. Dependencies Layer
# --------------------
FROM base AS deps

# Copy requirements separately for better caching
COPY requirements.txt requirements-test.txt ./

# Install production dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Install testing dependencies (optional, only if running tests inside container)
ARG INSTALL_DEV=false
RUN if [ "$INSTALL_DEV" = "true" ] ; then pip install --no-cache-dir -r requirements-test.txt ; fi

# --------------------
# 3. Final Runtime Image
# --------------------
FROM deps AS runtime

# Copy the rest of the application code
COPY . .

# Expose the port Streamlit uses
EXPOSE 8501

# Set environment variables (runtime defaults)/ 
ENV STREAMLIT_SERVER_PORT=8501 \
    STREAMLIT_SERVER_ADDRESS=0.0.0.0 \
    PYTHONUNBUFFERED=1

# Healthcheck for container monitoring
HEALTHCHECK --interval=30s --timeout=10s --start-period=10s --retries=3 \
    CMD curl -f http://localhost:8501/_stcore/health || exit 1

# Run the Streamlit app
CMD ["streamlit", "run", "src/app.py", "--server.headless=true"]







